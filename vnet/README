# Azure Virtual Network (VNet) Setup for AKS and Cosmos DB

## Overview
This guide provides step-by-step instructions to set up an **Azure Virtual Network (VNet)** for an **AKS cluster** and a **Cosmos DB Private Endpoint** using Terraform. The configuration follows best practices, ensuring **security, maintainability, and team collaboration**.

## **Prerequisites**
Before proceeding, ensure you have the following installed:

- [Terraform](https://developer.hashicorp.com/terraform/downloads) (Latest version)
- [Azure CLI](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli) (For authentication)
- An active **Azure subscription**

## **1Ô∏è‚É£ Authentication with Azure**
To avoid hardcoding credentials, we will use **environment variables** for authentication.

### **1.1 Login to Azure CLI**
Run the following command to authenticate Terraform with Azure:
```bash
az login
```
If you have multiple subscriptions, set the correct one:
```bash
az account set --subscription "<your-subscription-id>"
```
To retrieve your subscription ID:
```bash
az account show --query id --output tsv
```

## **2Ô∏è‚É£ Terraform Setup**

### **2.1 Define Environment Variables in Terraform**
To support both **dev** and **prod** environments, we will use Terraform variables.

#### **Create a `variables.tf` file**
```hcl
variable "environment" {
  description = "Deployment environment (dev or prod)"
  type        = string
  default     = "dev"
}

variable "subscription_id" {
  description = "Azure Subscription ID"
  type        = string
}

variable "location" {
  description = "Azure region"
  type        = string
}
```

### **2.2 Create Environment-Specific Terraform Variable Files**
Create a file for the development environment configuration.

#### **`terraform.dev.tfvars` (Ignored in `.gitignore`)**
```hcl
environment = "dev"
subscription_id = "your-dev-subscription-id"
location = "South India"
```

For production, we will use environment variables instead of a `.tfvars` file.

### **2.3 Initialize Terraform**
Run the following command to initialize Terraform:
```bash
terraform init
```

### **2.4 Create the VNet and Subnets**
Terraform will create the following resources:
- **VNet:** `aks-cosmos-vnet` (CIDR: `10.0.0.0/16`)
- **Subnets:**
  - `aks-subnet` (`10.0.1.0/24`) ‚Üí Used for AKS nodes
  - `cosmosdb-subnet` (`10.0.2.0/24`) ‚Üí Used for Cosmos DB Private Endpoint, now with **Service Endpoints enabled**

### **2.5 Improving Security and Performance with Service Endpoints**
To enhance security and performance, we will **enable Service Endpoints** for Cosmos DB within `cosmosdb-subnet`.

#### **Terraform Update for Service Endpoints:**
Modify the `cosmosdb-subnet` configuration to include:
```hcl
resource "azurerm_subnet" "cosmosdb_subnet" {
  name                 = "cosmosdb-subnet"
  resource_group_name  = azurerm_resource_group.huggingface.name
  virtual_network_name = azurerm_virtual_network.aks_cosmos_vnet.name
  address_prefixes     = ["10.0.2.0/24"]
  service_endpoints    = ["Microsoft.AzureCosmosDB"]
}
```

### **2.6 Apply Terraform Configuration**
#### **For Development (using `.tfvars` file):**
```bash
terraform apply -var-file=terraform.dev.tfvars -auto-approve
```
#### **For Production (using environment variables):**
```bash
terraform apply -auto-approve \
  -var="environment=prod" \
  -var="subscription_id=$ARM_SUBSCRIPTION_ID" \
  -var="location=$TF_LOCATION"
```
Once completed, Terraform will output the created resources.

## **3Ô∏è‚É£ Next Steps**
Now that the **VNet and subnets** are created, proceed with:

‚úÖ **Creating a Private Endpoint for Cosmos DB** to restrict access.
‚úÖ **Deploying AKS** inside `aks-subnet`.
‚úÖ **Configuring Private DNS** for Cosmos DB resolution.
‚úÖ **Updating Cosmos DB Network Settings** to allow only traffic from the configured subnet.

For further configurations, refer to the [Azure Terraform documentation](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs).

---
üöÄ **Your Azure Virtual Network is now securely set up for AKS and Cosmos DB with dynamic environment configuration!**