name: 'Terraform Plan/Apply'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: terraform 

      - name: Terraform Plan
        id: tf-plan
        env:
          TF_ENVIRONMENT: ${{ secrets.TF_ENVIRONMENT }}
          TF_SUBSCRIPTION_ID: ${{ secrets.TF_SUBSCRIPTION_ID }}
          TF_LOCATION: ${{ secrets.TF_LOCATION }}
          TF_KUBERNETES_VERSION: ${{ secrets.TF_KUBERNETES_VERSION }}
          TF_TAGS: ${{ secrets.TF_TAGS }}
        run: |
          export exitcode=0
      
          # Convert JSON-style TF_TAGS into valid Terraform map format
          TAGS_STRING=$(echo "$TF_TAGS" | jq -r 'to_entries | map("\(.key)=\\\"\(.value)\\\"") | join(", ")')
      
          terraform plan -detailed-exitcode -no-color -out tfplan \
            -var="environment=$TF_ENVIRONMENT" \
            -var="subscription_id=$TF_SUBSCRIPTION_ID" \
            -var="location=$TF_LOCATION" \
            -var="kubernetes_version=$TF_KUBERNETES_VERSION" \
            -var="tags={${TAGS_STRING}}" || export exitcode=$?
      
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          else 
            exit 0
          fi
        working-directory: terraform
      

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
              })

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform 

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform

      - name: Terraform Apply
        env:
          TF_ENVIRONMENT: ${{ secrets.TF_ENVIRONMENT }}
          TF_SUBSCRIPTION_ID: ${{ secrets.TF_SUBSCRIPTION_ID }}
          TF_LOCATION: ${{ secrets.TF_LOCATION }}
          TF_KUBERNETES_VERSION: ${{ secrets.TF_KUBERNETES_VERSION }}
          TF_TAGS: ${{ secrets.TF_TAGS }}
        run: |
          # Convert JSON-style TF_TAGS into properly escaped Terraform map format
          TAGS_STRING=$(echo "$TF_TAGS" | jq -r 'to_entries | map("\(.key)=\\\"\(.value)\\\"") | join(", ")')
          
          terraform apply -auto-approve \
            -var="environment=$TF_ENVIRONMENT" \
            -var="subscription_id=$TF_SUBSCRIPTION_ID" \
            -var="location=$TF_LOCATION" \
            -var="kubernetes_version=$TF_KUBERNETES_VERSION" \
            -var="tags={${TAGS_STRING}}" tfplan
        working-directory: terraform
